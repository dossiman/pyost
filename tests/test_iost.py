from unittest import main, TestCase
import base58
from pyost.iost import IOST
from pyost.transaction import Transaction


class TestIOST(TestCase):
    def setUp(self):
        self.iost = IOST('localhost:30002')

    def test_get_height(self):
        height = self.iost.get_height()
        self.assertGreaterEqual(height, 0)

    def test_get_tx_by_hash(self):
        tx_hash = b'6iYtt5eqwmEcDKfte7FhZFpcVXgsf7CR7wfbm1CqiHZb'
        tx, res_hash = self.iost.get_tx_by_hash(tx_hash)
        tx_compare = Transaction() # add content
        print(tx)
        self.assertEqual(res_hash, tx_hash)
        #self.assertDictEqual(tx, tx_compare)

    def test_get_tx_receipt_by_hash(self):
        tx_hash = b'6iYtt5eqwmEcDKfte7FhZFpcVXgsf7CR7wfbm1CqiHZb'
        receipt_hash = b'GWh7aHCZZeEjJXzQjtRcez6j1rbzNtbdGTQ7arNsB25i'
        tx, res_hash = self.iost.get_tx_receipt_by_hash(receipt_hash)
        compare_dict = {
            'txHash': b'6iYtt5eqwmEcDKfte7FhZFpcVXgsf7CR7wfbm1CqiHZb',
            'gasUsage': 303,
            'status': {},
            'succActionNum': 1
        }
        self.assertEqual(compare_dict['txHash'], tx_hash)
        self.assertEqual(res_hash, receipt_hash)
        self.assertDictEqual(tx, compare_dict)

    def test_get_tx_receipt_by_tx_hash(self):
        tx_hash = b'6iYtt5eqwmEcDKfte7FhZFpcVXgsf7CR7wfbm1CqiHZb'
        receipt_hash = b'GWh7aHCZZeEjJXzQjtRcez6j1rbzNtbdGTQ7arNsB25i'
        tx, res_hash = self.iost.get_tx_receipt_by_tx_hash(tx_hash)
        compare_dict = {
            'txHash': b'6iYtt5eqwmEcDKfte7FhZFpcVXgsf7CR7wfbm1CqiHZb',
            'gasUsage': 303,
            'status': {},
            'succActionNum': 1
        }
        self.assertEqual(compare_dict['txHash'], base58.b58decode(tx_hash))
        self.assertEqual(res_hash, base58.b58decode(receipt_hash))
        self.assertDictEqual(tx, compare_dict)

    def test_get_block_by_hash(self):
        block_hash = b'3VkWkdWf9ixSVNqqh9Cod22GXkaPQjhCzKD69Xx3nzDX'
        block_info = self.iost.get_block_by_hash(block_hash)
        compare_dict = {
            'head': {
                'txsHash': b'\x04\xe5#=\xa0\xcfq\x89\xcdG\xe8\x1b\xb5\x84Y]\xce\xf6\xca+\xc7\xe1\x9d\xe7\xbd\xbf\x82xOB\xdaU',
                'merkleHash': b'\x05\xb3\xb7#R\r\xdcU\x9d\x1dr\x0f@.\x80wQ\xd2$\xf0\xfd\x8bCp\xe3=\xd2~\x82*\xcf?',
                'witness': 'IOST2FpDWNFqH9VuA8GbbVAwQcyYGHZxFeiTwSyaeyXnV84yJZAG7A'},
            'hash': b'%\x14\xd67\x1anx\xac\x1b\xdd\xa6\x97\xb1;J\x8e\xa7\xc2~\xb5>\xd2\xc0\xb5h\x07[6VS\x94\xe2',
            'txhash': [
                b"\x97\xff\xe4Lv\x91\x10[\x90\x02\xc2\x93\x86\x81h\n\rt\x94_\x8b\xa1\x01\xc1\x87;\xf3\x02\x17',\xdb"],
            'receiptHash': [
                b'\x93\x95\x1a\xa4\xdbG\x8f\xa6\x94\x9c\xb2Sv\xa3\xa3X\xa5\xf9z\xfdS\x86c~\xaf\xbc\xc5\xee\xc2\x03DP']
        }
        self.assertDictEqual(block_info, compare_dict)

    def test_get_block_by_hash_complete(self):
        block_hash = '3VkWkdWf9ixSVNqqh9Cod22GXkaPQjhCzKD69Xx3nzDX'
        block_info = self.iost.get_block_by_hash(block_hash, complete=True)
        compare_dict = {
            'head': {
                'txsHash': b'\x04\xe5#=\xa0\xcfq\x89\xcdG\xe8\x1b\xb5\x84Y]\xce\xf6\xca+\xc7\xe1\x9d\xe7\xbd\xbf\x82xOB\xdaU',
                'merkleHash': b'\x05\xb3\xb7#R\r\xdcU\x9d\x1dr\x0f@.\x80wQ\xd2$\xf0\xfd\x8bCp\xe3=\xd2~\x82*\xcf?',
                'witness': 'IOST2FpDWNFqH9VuA8GbbVAwQcyYGHZxFeiTwSyaeyXnV84yJZAG7A'
            },
            'hash': b'%\x14\xd67\x1anx\xac\x1b\xdd\xa6\x97\xb1;J\x8e\xa7\xc2~\xb5>\xd2\xc0\xb5h\x07[6VS\x94\xe2',
            'txs': [{
                'gasLimit': 100000000,
                'actions': [
                    {'contract': 'iost.system', 'actionName': 'IssueIOST',
                     'data': '["IOSTfQFocqDn7VrKV7vvPqhAQGyeFU9XMYo5SNn5yQbdbzC75wM7C", 2100000000000000000]'},
                    {'contract': 'iost.system', 'actionName': 'InitSetCode',
                     'data': '["iost.vote", ""]'},
                    {'contract': 'iost.vote', 'actionName': 'InitProducer',
                     'data': '["IOSTfQFocqDn7VrKV7vvPqhAQGyeFU9XMYo5SNn5yQbdbzC75wM7C"]'},
                    {'contract': 'iost.vote', 'actionName': 'InitAdmin',
                     'data': '["IOSTbbKmaZi1QRMfd7K8bK22KQSFuKadLhSNBw6tmyCHCRSvTr9QN"]'},
                    {'contract': 'iost.system', 'actionName': 'InitSetCode',
                     'data': '["iost.bonus", "Cgppb3N0LmJvbnVzEmUKBm5hdGl2ZRIFMS4wLjAaJwoKQ2xhaW1Cb251cxoGCGQQZBhkIOgHKgZzdHJpbmcqBm51bWJlchoYCgtjb25zdHJ1Y3RvchoGCGQQZBhkIOgHGhEKBGluaXQaBghkEGQYZCDoBxoFY29kZXM="]'}
                ],
                'publisher': {
                    'algorithm': 2,
                    'sig': b'}\x1c\x024\x18\x19\xa9+\x87\x8c\xb2t\xf7+L\xc2s\xfe8\xc0\xd0Lt\xbc\xb7*\xf8\xc1\x89\x91\x91\xa8\x88\xdd\xfa\x19S9\x8b\xb6\xcbJ\x95)\xeeN9\xea\x94#\x069\xca$u\xd9.\xf0(\xa7\xd4\x04\xed\x00',
                    'pubKey': b"\xa5UN\xfd\x0b\x1d\x10\x91y\x7f'\xcf\xea\xeaA\xfe\x0b\xeb\x9d\xc9Fw\x03\xe4\t\x99p:S\xe7\xd6C"
                }
            }],
            'receipts': [{
                'txHash': b"\x97\xff\xe4Lv\x91\x10[\x90\x02\xc2\x93\x86\x81h\n\rt\x94_\x8b\xa1\x01\xc1\x87;\xf3\x02\x17',\xdb",
                'gasUsage': 1514,
                'status': {},
                'succActionNum': 5
            }]
        }
        self.assertDictEqual(block_info, compare_dict)

    def test_get_block_by_num(self):
        block_num = 0
        block_info = self.iost.get_block_by_num(block_num)
        compare_dict = {
            'head': {
                'txsHash': b'\x04\xe5#=\xa0\xcfq\x89\xcdG\xe8\x1b\xb5\x84Y]\xce\xf6\xca+\xc7\xe1\x9d\xe7\xbd\xbf\x82xOB\xdaU',
                'merkleHash': b'\x05\xb3\xb7#R\r\xdcU\x9d\x1dr\x0f@.\x80wQ\xd2$\xf0\xfd\x8bCp\xe3=\xd2~\x82*\xcf?',
                'witness': 'IOST2FpDWNFqH9VuA8GbbVAwQcyYGHZxFeiTwSyaeyXnV84yJZAG7A'},
            'hash': b'%\x14\xd67\x1anx\xac\x1b\xdd\xa6\x97\xb1;J\x8e\xa7\xc2~\xb5>\xd2\xc0\xb5h\x07[6VS\x94\xe2',
            'txhash': [
                b"\x97\xff\xe4Lv\x91\x10[\x90\x02\xc2\x93\x86\x81h\n\rt\x94_\x8b\xa1\x01\xc1\x87;\xf3\x02\x17',\xdb"]
        }
        self.assertDictEqual(block_info, compare_dict)

    def test_get_block_by_num_complete(self):
        block_num = 0
        block_info = self.iost.get_block_by_num(block_num, complete=True)
        compare_dict = {
            'head': {
                'txsHash': b'\x04\xe5#=\xa0\xcfq\x89\xcdG\xe8\x1b\xb5\x84Y]\xce\xf6\xca+\xc7\xe1\x9d\xe7\xbd\xbf\x82xOB\xdaU',
                'merkleHash': b'\x05\xb3\xb7#R\r\xdcU\x9d\x1dr\x0f@.\x80wQ\xd2$\xf0\xfd\x8bCp\xe3=\xd2~\x82*\xcf?',
                'witness': 'IOST2FpDWNFqH9VuA8GbbVAwQcyYGHZxFeiTwSyaeyXnV84yJZAG7A'
            },
            'hash': b'%\x14\xd67\x1anx\xac\x1b\xdd\xa6\x97\xb1;J\x8e\xa7\xc2~\xb5>\xd2\xc0\xb5h\x07[6VS\x94\xe2',
            'txs': [{
                'gasLimit': 100000000,
                'actions': [
                    {'contract': 'iost.system', 'actionName': 'IssueIOST',
                     'data': '["IOSTfQFocqDn7VrKV7vvPqhAQGyeFU9XMYo5SNn5yQbdbzC75wM7C", 2100000000000000000]'},
                    {'contract': 'iost.system', 'actionName': 'InitSetCode',
                     'data': '["iost.vote", ""]'},
                    {'contract': 'iost.vote', 'actionName': 'InitProducer',
                     'data': '["IOSTfQFocqDn7VrKV7vvPqhAQGyeFU9XMYo5SNn5yQbdbzC75wM7C"]'},
                    {'contract': 'iost.vote', 'actionName': 'InitAdmin',
                     'data': '["IOSTbbKmaZi1QRMfd7K8bK22KQSFuKadLhSNBw6tmyCHCRSvTr9QN"]'},
                    {'contract': 'iost.system', 'actionName': 'InitSetCode',
                     'data': '["iost.bonus", "Cgppb3N0LmJvbnVzEmUKBm5hdGl2ZRIFMS4wLjAaJwoKQ2xhaW1Cb251cxoGCGQQZBhkIOgHKgZzdHJpbmcqBm51bWJlchoYCgtjb25zdHJ1Y3RvchoGCGQQZBhkIOgHGhEKBGluaXQaBghkEGQYZCDoBxoFY29kZXM="]'}
                ],
                'publisher': {
                    'algorithm': 2,
                    'sig': b'}\x1c\x024\x18\x19\xa9+\x87\x8c\xb2t\xf7+L\xc2s\xfe8\xc0\xd0Lt\xbc\xb7*\xf8\xc1\x89\x91\x91\xa8\x88\xdd\xfa\x19S9\x8b\xb6\xcbJ\x95)\xeeN9\xea\x94#\x069\xca$u\xd9.\xf0(\xa7\xd4\x04\xed\x00',
                    'pubKey': b"\xa5UN\xfd\x0b\x1d\x10\x91y\x7f'\xcf\xea\xeaA\xfe\x0b\xeb\x9d\xc9Fw\x03\xe4\t\x99p:S\xe7\xd6C"
                }
            }]
        }
        self.assertDictEqual(block_info, compare_dict)

    def test_get_balance(self):
        account_id = '6d8jQzRcxawmTebQQhrWvBvbjpSp9CnPFCFQsuBoMWQc'
        balance = self.iost.get_balance(account_id, False)
        self.assertEqual(balance, 4000000000000)

    def test_get_net_id(self):
        id = self.iost.get_net_id()
        self.assertEqual(id, '12D3KooWGPpGc8gbaHGJ6BywPrUoUKpPUKPmbCyr3ZLfgQRqj9m5')

    def test_get_state(self):
        key = ''
        value = self.iost.get_state(key)
        print(value)


if __name__ == '__main__':
    tester = TestIOST()
    tester.setUp()
    tester.test_get_tx_by_hash()
